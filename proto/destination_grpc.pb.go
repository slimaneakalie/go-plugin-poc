// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/destination.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DestinationPluginClient is the client API for DestinationPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DestinationPluginClient interface {
	BatchUpsertUsers(ctx context.Context, in *BatchUpsertUsersRequest, opts ...grpc.CallOption) (*BatchUpsertUsersResponse, error)
	BatchUpdateUsers(ctx context.Context, in *BatchUpdateUsersRequest, opts ...grpc.CallOption) (*BatchUpdateUsersResponse, error)
	BatchDeleteUsers(ctx context.Context, in *BatchDeleteUsersRequest, opts ...grpc.CallOption) (*BatchDeleteUsersResponse, error)
}

type destinationPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewDestinationPluginClient(cc grpc.ClientConnInterface) DestinationPluginClient {
	return &destinationPluginClient{cc}
}

func (c *destinationPluginClient) BatchUpsertUsers(ctx context.Context, in *BatchUpsertUsersRequest, opts ...grpc.CallOption) (*BatchUpsertUsersResponse, error) {
	out := new(BatchUpsertUsersResponse)
	err := c.cc.Invoke(ctx, "/proto.DestinationPlugin/BatchUpsertUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationPluginClient) BatchUpdateUsers(ctx context.Context, in *BatchUpdateUsersRequest, opts ...grpc.CallOption) (*BatchUpdateUsersResponse, error) {
	out := new(BatchUpdateUsersResponse)
	err := c.cc.Invoke(ctx, "/proto.DestinationPlugin/BatchUpdateUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationPluginClient) BatchDeleteUsers(ctx context.Context, in *BatchDeleteUsersRequest, opts ...grpc.CallOption) (*BatchDeleteUsersResponse, error) {
	out := new(BatchDeleteUsersResponse)
	err := c.cc.Invoke(ctx, "/proto.DestinationPlugin/BatchDeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DestinationPluginServer is the server API for DestinationPlugin service.
// All implementations must embed UnimplementedDestinationPluginServer
// for forward compatibility
type DestinationPluginServer interface {
	BatchUpsertUsers(context.Context, *BatchUpsertUsersRequest) (*BatchUpsertUsersResponse, error)
	BatchUpdateUsers(context.Context, *BatchUpdateUsersRequest) (*BatchUpdateUsersResponse, error)
	BatchDeleteUsers(context.Context, *BatchDeleteUsersRequest) (*BatchDeleteUsersResponse, error)
	mustEmbedUnimplementedDestinationPluginServer()
}

// UnimplementedDestinationPluginServer must be embedded to have forward compatible implementations.
type UnimplementedDestinationPluginServer struct {
}

func (UnimplementedDestinationPluginServer) BatchUpsertUsers(context.Context, *BatchUpsertUsersRequest) (*BatchUpsertUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertUsers not implemented")
}
func (UnimplementedDestinationPluginServer) BatchUpdateUsers(context.Context, *BatchUpdateUsersRequest) (*BatchUpdateUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateUsers not implemented")
}
func (UnimplementedDestinationPluginServer) BatchDeleteUsers(context.Context, *BatchDeleteUsersRequest) (*BatchDeleteUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteUsers not implemented")
}
func (UnimplementedDestinationPluginServer) mustEmbedUnimplementedDestinationPluginServer() {}

// UnsafeDestinationPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DestinationPluginServer will
// result in compilation errors.
type UnsafeDestinationPluginServer interface {
	mustEmbedUnimplementedDestinationPluginServer()
}

func RegisterDestinationPluginServer(s grpc.ServiceRegistrar, srv DestinationPluginServer) {
	s.RegisterService(&DestinationPlugin_ServiceDesc, srv)
}

func _DestinationPlugin_BatchUpsertUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).BatchUpsertUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DestinationPlugin/BatchUpsertUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).BatchUpsertUsers(ctx, req.(*BatchUpsertUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationPlugin_BatchUpdateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).BatchUpdateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DestinationPlugin/BatchUpdateUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).BatchUpdateUsers(ctx, req.(*BatchUpdateUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationPlugin_BatchDeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).BatchDeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DestinationPlugin/BatchDeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).BatchDeleteUsers(ctx, req.(*BatchDeleteUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DestinationPlugin_ServiceDesc is the grpc.ServiceDesc for DestinationPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DestinationPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DestinationPlugin",
	HandlerType: (*DestinationPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchUpsertUsers",
			Handler:    _DestinationPlugin_BatchUpsertUsers_Handler,
		},
		{
			MethodName: "BatchUpdateUsers",
			Handler:    _DestinationPlugin_BatchUpdateUsers_Handler,
		},
		{
			MethodName: "BatchDeleteUsers",
			Handler:    _DestinationPlugin_BatchDeleteUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/destination.proto",
}
